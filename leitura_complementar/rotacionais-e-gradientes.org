#+title: Rotacionais e gradientes
#+NAME: Nícolas André da Costa Morazotti
#+exclude_tags: noexport
#+options: toc:nil ':t
* preamble :noexport:
#+latex_header: \usepackage{tikz}
#+language:pt
#+latex_header: \usepackage[AUTO]{babel}
#+latex_header: \usepackage[margin=1in]{geometry}
* Rotacionais e gradientes                                           :ignore:
Podemos entender o que ocorre ao calcularmos o rotacional de um campo da
seguinte maneira: suponha um campo $\mathbf A = xy(\hat x+\hat y+\hat
z)$. Primeiramente, definimos o campo:

#+BEGIN_SRC jupyter-python :session py :exports both :results raw drawer :async yes 
  import numpy as np
  from sympy import *
  from sympy.physics.vector import ReferenceFrame, curl, divergence, gradient

  S = ReferenceFrame('S')
  A = (S[0]*S[1])*(S.x+S.y+S.z)
  vars = [S[0],S[1],S[2]]
  A
#+END_SRC

#+RESULTS:
:RESULTS:
#+BEGIN_EXPORT latex
$\displaystyle S_{x} S_{y}\mathbf{\hat{s}_x} + S_{x} S_{y}\mathbf{\hat{s}_y} + S_{x} S_{y}\mathbf{\hat{s}_z}$
#+END_EXPORT
:END:

Veja que podemos calcular o rotacional de $\mathbf A$ referente ao
referencial $S$ com =curl(A,S)=:
#+BEGIN_SRC jupyter-python :session py :exports both :results raw drawer  :async yes :eval never-export
  curl(A,S)
#+END_SRC

#+RESULTS:
:RESULTS:
#+BEGIN_EXPORT latex
$\displaystyle S_{x}\mathbf{\hat{s}_x} -  S_{y}\mathbf{\hat{s}_y} + (- S_{x} + S_{y})\mathbf{\hat{s}_z}$
#+END_EXPORT
:END:

Desejamos plotar o campo $\mathbf A$ e seu rotacional num plano $z=0$. 
#+BEGIN_SRC jupyter-python :session py :exports both :results raw drawer  :async yes 
  import matplotlib.pyplot as plt
  from matplotlib.pyplot import figure
  figure(dpi=300)

  X,Y = np.mgrid[-4:4:100j,-4:4:100j]
  U = lambdify(vars,A.dot(S.x),modules='numpy')
  V = lambdify(vars,A.dot(S.y),modules='numpy')
  plt.streamplot(Y,X, U(X,Y,0), V(X,Y,0))
  plt.title(r'Campo $\mathbf{A} = xy(\hat{x}+\hat{y}+\hat{z})$')
  plt.xlabel(r'x')
  plt.ylabel(r'y')
  plt.show()
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/43d316de40283c44695830cfba0f8ecfad906438.png]]
:END:
#+BEGIN_SRC jupyter-python :session py :exports both :results raw drawer  :async yes 
  U = lambdify(vars,curl(A,S).dot(S.x),modules='numpy')
  V = lambdify(vars,curl(A,S).dot(S.y),modules='numpy')
  plt.streamplot(Y,X, U(X,Y,0), V(X,Y,0))
  plt.title(r'$\nabla\times\mathbf{A}$')
  plt.xlabel(r'x')
  plt.ylabel(r'y')
  plt.show()
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/4edf476308f0b5a8649586320674ef65e4020ad6.png]]
:END:

Se tivéssemos definido o campo $\mathbf A$ como um gradiente de um campo
escalar $f=xy$,
#+BEGIN_SRC jupyter-python :session py :exports both :results raw drawer :async yes 
  f = S[0]*S[1]
  A = gradient(f,S)
  A
#+END_SRC

#+RESULTS:
:RESULTS:
#+BEGIN_EXPORT latex
$\displaystyle S_{y}\mathbf{\hat{s}_x} + S_{x}\mathbf{\hat{s}_y}$
#+END_EXPORT
:END:

#+BEGIN_SRC jupyter-python :session py :exports both :results raw drawer :eval never-export :async yes 
  U = lambdify(vars,A.dot(S.x),modules='numpy')
  V = lambdify(vars,A.dot(S.y),modules='numpy')
  plt.streamplot(Y,X, U(X,Y,0), V(X,Y,0))
  plt.title(r'$\mathbf{A}=\nabla f$')
  plt.xlabel(r'x')
  plt.ylabel(r'y')
  plt.show()
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/cbf904adf44fd782d970be8c5bb5abc08d26473b.png]]
:END:
De tal modo que $\nabla\times A=0$:
#+BEGIN_SRC jupyter-python :session py :exports both :results raw drawer :eval never-export :async yes 
curl(A,S)
#+END_SRC

#+RESULTS:
:RESULTS:
#+BEGIN_EXPORT latex
$\displaystyle 0$
#+END_EXPORT
:END:

* vars                                                             :noexport:
# Local Variables:
# eval: (auto-fill-mode)
# eval: (flyspell-mode)
# eval: (org-toggle-pretty-entities)
# eval: (latex-math-mode)	
# eval: (setq org-src-window-setup 'current-window)
# End:
